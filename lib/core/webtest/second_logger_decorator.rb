
require 'logger'
require 'decorator'

module Webtest

	# 
	# can attach a temporary alternate 
	# logger instead of original one
	#
	class SecondLoggerDecorator
		include Decorator
	
		attr_writer :localLogger
		attr_writer :sendToBoth
		
		#
		# messages to logger generated by this will go to
		# logToBeDecorated and a outputStream at once
		#
		def self.newPassthroughLogger(logger1, logger2)
			
			decoratedLog = SecondLoggerDecorator.new(logger1)
			decoratedLog.localLogger = logger2
			decoratedLog.sendToBoth = true
			
			return decoratedLog
		end
		
		def initialize(decorated)
			@decorated = decorated
			@sendToBoth = false
		end
		
		def level=(level)
			@decorated.level = level
			@localLogger.level = level unless @localLogger == nil
		end
	
		def debug(progname = nil, &block)
			if(@localLogger != nil)
				@localLogger.debug(progname, &block)
			end
			
            if @sendToBoth
                @decorated.debug(progname, &block)
            end                
		end	
		
		def info(progname = nil, &block)
			if(@localLogger != nil)
				@localLogger.info(progname, &block)			
			end
		
            if @sendToBoth
                @decorated.info(progname, &block)
            end
		end		
		
		def warn(progname = nil, &block)
			if(@localLogger != nil)
				@localLogger.warn(progname, &block)
			end
            
           
            if @sendToBoth
                @decorated.warn(progname, &block)
            end
		end			
	
		def error(progname = nil, &block)
			if(@localLogger != nil)
				@localLogger.error(progname, &block)
			end
			
			@decorated.error(progname, &block) if @sendToBoth
		end	
		
	end

end