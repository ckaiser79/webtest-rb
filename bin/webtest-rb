#!/usr/bin/env ruby

$LOAD_PATH << '../lib/'
$LOAD_PATH << '../vendor/lib'

require 'optparse'
require 'webtest'
require 'webtest/startup'

def readCommandlineArguments

	options = {}
		 
	ARGV << "-h" if ARGV.empty?
		 
	optparse = OptionParser.new do|opts|
		# Set a banner, displayed at the top
		# of the help screen.
		opts.banner = "Usage: run_testcases [options]"
	 
		# Define the options, and what they do
		options[:verbose] = false
		opts.on( '-v', '--verbose', 'Output more information' ) do
			options[:verbose] = true
		end
	 
		options[:logfile] = nil
		opts.on( '-l', '--logfile FILE', 'Write log to FILE' ) do|file|
			options[:logfile] = file
		end
		
		options[:config] = nil
		opts.on( '-c', '--config FILE', 'Load this configuration' ) do|file|
			options[:config] = file
		end
		
		options[:browser] = nil
		opts.on( '-b', '--browser <ie|firefox|chrome>', 'Run testcase using this browser' ) do |type|
			options[:browser] = type
		end		
		
		options[:base_url] = nil
		opts.on( '-s', '--base-url BASE-URL', 'The browser uses this value as the protocol://hostname part' ) do |base_url|
			options[:base_url] = base_url
		end		
		
		options[:include] = Array.new
		opts.on( '-i', '--include-test-dir DIR', 'Use this testcase dir instead of configured one [0..n]' ) do |dir|
			options[:include].push dir
			options[:run_all] = true
		end	
		
		options[:run_all] = false
		opts.on( '-r', '--run-all', 'Run all selected testcases' ) do
			options[:run_all] = true
		end	

		options[:remove_logs] = false
		opts.on( '-c', '--remove-logs', 'Remove logdirectory before running tests' ) do
			options[:remove_logs] = true
		end	
		
		options[:print_summary]
		opts.on( '-p', '--print-summary', 'Print a summary of all results based on last created logfile.' ) do
			options[:print_summary] = true
		end	
		
		options[:force]
		opts.on( '-f', '--force', 'If lock file exists, remove it, and create a new one.' ) do
			options[:force] = true
		end			
		
		options[:name] = nil
		opts.on( '-n', '--name NAME', 'You can give this run a name, that is used as an identifier in archived files.' ) do |name|
			options[:name] = name
		end		
		
		options[:archive_enabled] = false
		opts.on( '-a', '--archive', 'Overwrite setting main:archive:enabled with true value.' ) do |name|
			options[:name] = true
		end				
	 
		# This displays the help screen, all programs are
		# assumed to have this option.
		opts.on( '-h', '--help', 'Display this screen' ) do
			puts opts
			exit
		end
	end

	optparse.parse!
	return options
end


def initConfiguration(fileName)

	yamlString = File.open(fileName)
	@config = Webtest::Configuration.new

	f = File.open(Dir.pwd + '/../lib/core/webtest/defaults-config.yml')
	@config.loadApplicationDefaults(f)
	@config.loadGlobal(yamlString)

	ac = WTAC.instance
	ac.config = @config
end


options = readCommandlineArguments

if options[:config] == nil 
	options[:config] = '../conf/webtest.yml'
end


initConfiguration options[:config]
config = WTAC.instance.config

if options[:logfile] != nil 
	config.saveGlobalValue("main:logfile", options[:logfile])
else
	logdir = config.read("main:logdir")	
	config.saveGlobalValue("main:logfile", logdir + '/' + Webtest::DEFAULT_RUN_LOGFILE)
end
	
if options[:browser] != nil 
	config.saveGlobalValue("browser-tests:browser-type", options[:browser])
end

if not options[:include].empty?
	config.saveGlobalValue("testrun:includes", options[:include])
end

config.saveGlobalValue("main:verbose", options[:verbose].to_s)
config.saveGlobalValue("main:archive:name", options[:name].to_s)

config.saveGlobalValue("browser-tests:baseUrl", options[:base_url].to_s) unless options[:base_url].nil?

if options[:force] == true
	config.saveGlobalValue("main:force-remove-lockfile", true)
else
	config.saveGlobalValue("main:force-remove-lockfile", false)
end

if options[:remove_logs]
	logDir = config.read('main:logdir')
	puts "Remove logdir\t" + logDir if config.read('main:verbose')
	FileUtils.rm_rf(logDir)
	FileUtils.rm_rf(logDir)
	if Dir[logDir].empty?
		puts "Done\t\t" + logDir if config.read('main:verbose')
	else
		puts "Fail, files in directory are in use."
	end
	
end

if options[:run_all] || options[:testcase] != nil
	webtest = Webtest::Startup.instance
	webtest.run
end

if options[:print_summary]
	
	Webtest::HtmlReportGenerateService.new.generate
	
	fileName = config.read('main:logfile')
	service = Webtest::LogfileResultPrintingService.instance
	
	puts ""
	puts service.allFailures(fileName).join("")
	puts service.allIssues(fileName).join("")
	puts service.allSucceeds(fileName).join("")
end
