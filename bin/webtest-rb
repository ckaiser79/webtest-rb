#!/usr/bin/env ruby

$LOAD_PATH << '../lib/core'
$LOAD_PATH << '../lib/vendor'

require 'optparse'
require 'webtest'
require 'webtest/startup'

def readCommandlineArguments

	options = {}
	 
	optparse = OptionParser.new do|opts|
		# Set a banner, displayed at the top
		# of the help screen.
		opts.banner = "Usage: run_testcases [options]"
	 
		# Define the options, and what they do
		options[:verbose] = false
		opts.on( '-v', '--verbose', 'Output more information' ) do
			options[:verbose] = true
		end
	 
		options[:logfile] = nil
		opts.on( '-l', '--logfile FILE', 'Write log to FILE' ) do|file|
			options[:logfile] = file
		end
		
		options[:config] = nil
		opts.on( '-c', '--config FILE', 'Load this configuration' ) do|file|
			options[:config] = file
		end
		
		options[:testcase] = nil
		opts.on( '-t', '--testcase FILE', 'Load single testcase' ) do|file|
			options[:testcase] = file
		end
		
		options[:browser] = nil
		opts.on( '-b', '--browser <ie|firefox|chrome>', 'Run testcase using this browser' ) do|file|
			options[:browser] = file
		end		
	 
		# This displays the help screen, all programs are
		# assumed to have this option.
		opts.on( '-h', '--help', 'Display this screen' ) do
			puts opts
			exit
		end
	end

	optparse.parse!
	return options
end

webtest = Webtest::Startup.instance
options = readCommandlineArguments

if(options[:config] == nil) 
	options[:config] = '../conf/webtest.yml'
end

webtest.init(File.open(options[:config]))
config = webtest.config

if(options[:logfile] != nil) 
	config.saveGlobalValue("main:logfile", options[:logfile])
end

if(options[:browser] != nil) 
	config.saveGlobalValue("browser-tests:browser-type", options[:browser])
end

if(options[:testcase] != nil) 
	config.saveGlobalValue("testrun:testcase", options[:testcase])
else
	config.saveGlobalValue("testrun:testcase", "<empty>")
end

config.saveGlobalValue("main:verbose", options[:verbose].to_s)

webtest.run

