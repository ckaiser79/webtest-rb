#!/usr/bin/env ruby

$LOAD_PATH << '../lib/core'
$LOAD_PATH << '../lib/vendor'

require 'optparse'
require 'webtest'
require 'webtest/startup'

def readCommandlineArguments

	options = {}
	 
	optparse = OptionParser.new do|opts|
		# Set a banner, displayed at the top
		# of the help screen.
		opts.banner = "Usage: run_testcases [options]"
	 
		# Define the options, and what they do
		options[:verbose] = false
		opts.on( '-v', '--verbose', 'Output more information' ) do
			options[:verbose] = true
		end
	 
		options[:logfile] = nil
		opts.on( '-l', '--logfile FILE', 'Write log to FILE' ) do|file|
			options[:logfile] = file
		end
		
		options[:config] = nil
		opts.on( '-c', '--config FILE', 'Load this configuration' ) do|file|
			options[:config] = file
		end
		
		options[:testcase] = nil
		opts.on( '-t', '--testcase FILE', 'Load single testcase' ) do|file|
			options[:testcase] = file
		end
		
		options[:browser] = nil
		opts.on( '-b', '--browser <ie|firefox|chrome>', 'Run testcase using this browser' ) do|file|
			options[:browser] = file
		end		
		
		options[:run_all] = false
		opts.on( '-r', '--run-all', 'Run all selected testcases' ) do
			options[:run_all] = true
		end	

		options[:remove_logs] = false
		opts.on( '-c', '--remove-logs', 'Remove logdirectory before running tests' ) do
			options[:remove_logs] = true
		end	
		
		options[:print_summary]
		opts.on( '-p', '--print-summary', 'Print a summary of all results based on last created logfile.' ) do
			options[:print_summary] = true
		end	
	 
		# This displays the help screen, all programs are
		# assumed to have this option.
		opts.on( '-h', '--help', 'Display this screen' ) do
			puts opts
			exit
		end
	end

	optparse.parse!
	return options
end


def initConfiguration(fileName)

	yamlString = File.open(fileName)
	@config = Webtest::Configuration.new

	f = File.open(Dir.pwd + '/../lib/core/webtest/defaults-config.yml')
	@config.loadApplicationDefaults(f)
	@config.loadGlobal(yamlString)

	ac = WTAC.instance
	ac.config = @config
end


options = readCommandlineArguments

if options[:config] == nil 
	options[:config] = '../conf/webtest.yml'
end

initConfiguration options[:config]
config = WTAC.instance.config

if options[:logfile] != nil 
	config.saveGlobalValue("main:logfile", options[:logfile])
else
	logdir = config.read("main:logdir")	
	config.saveGlobalValue("main:logfile", logdir + '/' + Webtest::DEFAULT_RUN_LOGFILE)
end
	
if options[:browser] != nil 
	config.saveGlobalValue("browser-tests:browser-type", options[:browser])
end

if options[:testcase] != nil
	config.saveGlobalValue("testrun:testcase", options[:testcase])
else
	config.saveGlobalValue("testrun:testcase", "<empty>")
end

config.saveGlobalValue("main:verbose", options[:verbose].to_s)

if options[:remove_logs]
	logDir = config.read('main:logdir')
	puts "Remove logdir " + logDir if config.read('main:verbose')
	FileUtils.rm_rf(logDir)
	puts "Done" + logDir if config.read('main:verbose')
end

if options[:run_all] || options[:testcase] != nil
	webtest = Webtest::Startup.instance
	webtest.run
end

if options[:print_summary]
	
	fileName = config.read('main:logfile')
	service = Webtest::LogfileResultPrintingService.instance
	
	puts ""
	puts service.allFailures(fileName).join("")
	puts service.allIssues(fileName).join("")
	puts service.allSucceeds(fileName).join("")
end
